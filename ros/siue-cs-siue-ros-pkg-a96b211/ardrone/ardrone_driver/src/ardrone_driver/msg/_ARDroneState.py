"""autogenerated by genmsg_py from ARDroneState.msg. Do not edit."""
import roslib.message
import struct

import ardrone_driver.msg
import roslib.msg

class ARDroneState(roslib.message.Message):
  _md5sum = "b785b22a90b6e1d04537476916861f8a"
  _type = "ardrone_driver/ARDroneState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

#The current altitude, in meters
float32 altitude

#Indicates whether the drone is airborne
bool is_airborne

#Percentage of battery life remaining. Note that because of the way the hardware reports it's battery life
# the drone could still be powered on, yet be reporting a battery percentage of 0. This means it has determined
# it does not have enough battery to fly, and it will not takeoff if commanded to.
int32 battery_percentage

#Battery voltage
float32 battery_voltage

#Indicates if the drone is in emergency mode
bool estop_state

#Current speed in meters/sec, calculated by the onboard IMU data fused with optical flow
# from the downward facing camera
ardrone_driver/Velocity vels

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ardrone_driver/Velocity
float32 x
float32 y
float32 z

"""
  __slots__ = ['header','altitude','is_airborne','battery_percentage','battery_voltage','estop_state','vels']
  _slot_types = ['Header','float32','bool','int32','float32','bool','ardrone_driver/Velocity']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,altitude,is_airborne,battery_percentage,battery_voltage,estop_state,vels
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ARDroneState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      if self.altitude is None:
        self.altitude = 0.
      if self.is_airborne is None:
        self.is_airborne = False
      if self.battery_percentage is None:
        self.battery_percentage = 0
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.estop_state is None:
        self.estop_state = False
      if self.vels is None:
        self.vels = ardrone_driver.msg.Velocity()
    else:
      self.header = roslib.msg._Header.Header()
      self.altitude = 0.
      self.is_airborne = False
      self.battery_percentage = 0
      self.battery_voltage = 0.
      self.estop_state = False
      self.vels = ardrone_driver.msg.Velocity()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_fBifB3f.pack(_x.altitude, _x.is_airborne, _x.battery_percentage, _x.battery_voltage, _x.estop_state, _x.vels.x, _x.vels.y, _x.vels.z))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      if self.vels is None:
        self.vels = ardrone_driver.msg.Velocity()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.altitude, _x.is_airborne, _x.battery_percentage, _x.battery_voltage, _x.estop_state, _x.vels.x, _x.vels.y, _x.vels.z,) = _struct_fBifB3f.unpack(str[start:end])
      self.is_airborne = bool(self.is_airborne)
      self.estop_state = bool(self.estop_state)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_fBifB3f.pack(_x.altitude, _x.is_airborne, _x.battery_percentage, _x.battery_voltage, _x.estop_state, _x.vels.x, _x.vels.y, _x.vels.z))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      if self.vels is None:
        self.vels = ardrone_driver.msg.Velocity()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.altitude, _x.is_airborne, _x.battery_percentage, _x.battery_voltage, _x.estop_state, _x.vels.x, _x.vels.y, _x.vels.z,) = _struct_fBifB3f.unpack(str[start:end])
      self.is_airborne = bool(self.is_airborne)
      self.estop_state = bool(self.estop_state)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_fBifB3f = struct.Struct("<fBifB3f")
