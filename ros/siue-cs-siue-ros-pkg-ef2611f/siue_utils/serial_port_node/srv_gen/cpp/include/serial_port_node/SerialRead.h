/* Auto-generated by genmsg_cpp for file /home/xps/ros_pkgs/siue-ros-pkg/siue_utils/serial_port_node/srv/SerialRead.srv */
#ifndef SERIAL_PORT_NODE_SERVICE_SERIALREAD_H
#define SERIAL_PORT_NODE_SERVICE_SERIALREAD_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace serial_port_node
{
template <class ContainerAllocator>
struct SerialReadRequest_ : public ros::Message
{
  typedef SerialReadRequest_<ContainerAllocator> Type;

  SerialReadRequest_()
  : length(0)
  {
  }

  SerialReadRequest_(const ContainerAllocator& _alloc)
  : length(0)
  {
  }

  typedef int16_t _length_type;
  int16_t length;


private:
  static const char* __s_getDataType_() { return "serial_port_node/SerialReadRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1896e1c4aa74651d1c7aac60fa5dbd73"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "2f7fdba859bced703f7f6326ffb3f829"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int16 length\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, length);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, length);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(length);
    return size;
  }

  typedef boost::shared_ptr< ::serial_port_node::SerialReadRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_port_node::SerialReadRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SerialReadRequest
typedef  ::serial_port_node::SerialReadRequest_<std::allocator<void> > SerialReadRequest;

typedef boost::shared_ptr< ::serial_port_node::SerialReadRequest> SerialReadRequestPtr;
typedef boost::shared_ptr< ::serial_port_node::SerialReadRequest const> SerialReadRequestConstPtr;


template <class ContainerAllocator>
struct SerialReadResponse_ : public ros::Message
{
  typedef SerialReadResponse_<ContainerAllocator> Type;

  SerialReadResponse_()
  : data()
  , bytesRead(0)
  , status(false)
  {
  }

  SerialReadResponse_(const ContainerAllocator& _alloc)
  : data(_alloc)
  , bytesRead(0)
  , status(false)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  data;

  typedef int16_t _bytesRead_type;
  int16_t bytesRead;

  typedef uint8_t _status_type;
  uint8_t status;


private:
  static const char* __s_getDataType_() { return "serial_port_node/SerialReadResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b3e77c63924a05ad9818425eebfaca64"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "2f7fdba859bced703f7f6326ffb3f829"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string data\n\
int16 bytesRead\n\
bool status\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, data);
    ros::serialization::serialize(stream, bytesRead);
    ros::serialization::serialize(stream, status);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, data);
    ros::serialization::deserialize(stream, bytesRead);
    ros::serialization::deserialize(stream, status);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(data);
    size += ros::serialization::serializationLength(bytesRead);
    size += ros::serialization::serializationLength(status);
    return size;
  }

  typedef boost::shared_ptr< ::serial_port_node::SerialReadResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_port_node::SerialReadResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct SerialReadResponse
typedef  ::serial_port_node::SerialReadResponse_<std::allocator<void> > SerialReadResponse;

typedef boost::shared_ptr< ::serial_port_node::SerialReadResponse> SerialReadResponsePtr;
typedef boost::shared_ptr< ::serial_port_node::SerialReadResponse const> SerialReadResponseConstPtr;

struct SerialRead
{

typedef SerialReadRequest Request;
typedef SerialReadResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SerialRead
} // namespace serial_port_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::serial_port_node::SerialReadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1896e1c4aa74651d1c7aac60fa5dbd73";
  }

  static const char* value(const  ::serial_port_node::SerialReadRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1896e1c4aa74651dULL;
  static const uint64_t static_value2 = 0x1c7aac60fa5dbd73ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_port_node::SerialReadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "serial_port_node/SerialReadRequest";
  }

  static const char* value(const  ::serial_port_node::SerialReadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::serial_port_node::SerialReadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 length\n\
\n\
";
  }

  static const char* value(const  ::serial_port_node::SerialReadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::serial_port_node::SerialReadRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::serial_port_node::SerialReadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b3e77c63924a05ad9818425eebfaca64";
  }

  static const char* value(const  ::serial_port_node::SerialReadResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb3e77c63924a05adULL;
  static const uint64_t static_value2 = 0x9818425eebfaca64ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_port_node::SerialReadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "serial_port_node/SerialReadResponse";
  }

  static const char* value(const  ::serial_port_node::SerialReadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::serial_port_node::SerialReadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string data\n\
int16 bytesRead\n\
bool status\n\
\n\
\n\
";
  }

  static const char* value(const  ::serial_port_node::SerialReadResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::serial_port_node::SerialReadRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.length);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SerialReadRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::serial_port_node::SerialReadResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
    stream.next(m.bytesRead);
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SerialReadResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<serial_port_node::SerialRead> {
  static const char* value() 
  {
    return "2f7fdba859bced703f7f6326ffb3f829";
  }

  static const char* value(const serial_port_node::SerialRead&) { return value(); } 
};

template<>
struct DataType<serial_port_node::SerialRead> {
  static const char* value() 
  {
    return "serial_port_node/SerialRead";
  }

  static const char* value(const serial_port_node::SerialRead&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<serial_port_node::SerialReadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2f7fdba859bced703f7f6326ffb3f829";
  }

  static const char* value(const serial_port_node::SerialReadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<serial_port_node::SerialReadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "serial_port_node/SerialRead";
  }

  static const char* value(const serial_port_node::SerialReadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<serial_port_node::SerialReadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2f7fdba859bced703f7f6326ffb3f829";
  }

  static const char* value(const serial_port_node::SerialReadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<serial_port_node::SerialReadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "serial_port_node/SerialRead";
  }

  static const char* value(const serial_port_node::SerialReadResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SERIAL_PORT_NODE_SERVICE_SERIALREAD_H

