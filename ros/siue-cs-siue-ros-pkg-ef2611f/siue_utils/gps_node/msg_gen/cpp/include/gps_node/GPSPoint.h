/* Auto-generated by genmsg_cpp for file /home/xps/ros_pkgs/siue-ros-pkg/siue_utils/gps_node/msg/GPSPoint.msg */
#ifndef GPS_NODE_MESSAGE_GPSPOINT_H
#define GPS_NODE_MESSAGE_GPSPOINT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace gps_node
{
template <class ContainerAllocator>
struct GPSPoint_ : public ros::Message
{
  typedef GPSPoint_<ContainerAllocator> Type;

  GPSPoint_()
  : lat()
  , lon()
  , speed(0.0)
  , status(0)
  , bearing(0.0)
  {
  }

  GPSPoint_(const ContainerAllocator& _alloc)
  : lat(_alloc)
  , lon(_alloc)
  , speed(0.0)
  , status(0)
  , bearing(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lat_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  lat;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lon_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  lon;

  typedef float _speed_type;
  float speed;

  typedef int8_t _status_type;
  int8_t status;

  typedef float _bearing_type;
  float bearing;


private:
  static const char* __s_getDataType_() { return "gps_node/GPSPoint"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "153c325296e395b378bbb3ea6de6f97f"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string lat\n\
string lon\n\
float32 speed\n\
int8 status\n\
float32 bearing\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, lat);
    ros::serialization::serialize(stream, lon);
    ros::serialization::serialize(stream, speed);
    ros::serialization::serialize(stream, status);
    ros::serialization::serialize(stream, bearing);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, lat);
    ros::serialization::deserialize(stream, lon);
    ros::serialization::deserialize(stream, speed);
    ros::serialization::deserialize(stream, status);
    ros::serialization::deserialize(stream, bearing);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(lat);
    size += ros::serialization::serializationLength(lon);
    size += ros::serialization::serializationLength(speed);
    size += ros::serialization::serializationLength(status);
    size += ros::serialization::serializationLength(bearing);
    return size;
  }

  typedef boost::shared_ptr< ::gps_node::GPSPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_node::GPSPoint_<ContainerAllocator>  const> ConstPtr;
}; // struct GPSPoint
typedef  ::gps_node::GPSPoint_<std::allocator<void> > GPSPoint;

typedef boost::shared_ptr< ::gps_node::GPSPoint> GPSPointPtr;
typedef boost::shared_ptr< ::gps_node::GPSPoint const> GPSPointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gps_node::GPSPoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gps_node::GPSPoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gps_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::gps_node::GPSPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "153c325296e395b378bbb3ea6de6f97f";
  }

  static const char* value(const  ::gps_node::GPSPoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x153c325296e395b3ULL;
  static const uint64_t static_value2 = 0x78bbb3ea6de6f97fULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_node::GPSPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_node/GPSPoint";
  }

  static const char* value(const  ::gps_node::GPSPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_node::GPSPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string lat\n\
string lon\n\
float32 speed\n\
int8 status\n\
float32 bearing\n\
\n\
";
  }

  static const char* value(const  ::gps_node::GPSPoint_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_node::GPSPoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.lat);
    stream.next(m.lon);
    stream.next(m.speed);
    stream.next(m.status);
    stream.next(m.bearing);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GPSPoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_node::GPSPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gps_node::GPSPoint_<ContainerAllocator> & v) 
  {
    s << indent << "lat: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lon);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "bearing: ";
    Printer<float>::stream(s, indent + "  ", v.bearing);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GPS_NODE_MESSAGE_GPSPOINT_H

